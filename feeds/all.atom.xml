<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's Site</title><link href="https://danielms.site/" rel="alternate"></link><link href="https://danielms.site/feeds/all.atom.xml" rel="self"></link><id>https://danielms.site/</id><updated>2018-05-22T00:00:00+10:00</updated><entry><title>Base64 ELI5</title><link href="https://danielms.site/posts/2018/May/base64-eli5/" rel="alternate"></link><published>2018-05-22T00:00:00+10:00</published><updated>2018-05-22T00:00:00+10:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-05-22:/posts/2018/May/base64-eli5/</id><summary type="html">&lt;div class="section" id="base64"&gt;
&lt;h2&gt;Base64&lt;/h2&gt;
&lt;p&gt;I thought I understood Base64. I mean its the alphabet in upper and lowercase plus
numbers and a couple characters. But, what I didn't know was how the 64 bits worked, like
thats missing a whole extra two bits. Why?&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Base64 is a binary to ASCII encoding …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="base64"&gt;
&lt;h2&gt;Base64&lt;/h2&gt;
&lt;p&gt;I thought I understood Base64. I mean its the alphabet in upper and lowercase plus
numbers and a couple characters. But, what I didn't know was how the 64 bits worked, like
thats missing a whole extra two bits. Why?&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Base64 is a binary to ASCII encoding that takes a byte (8 bits) and chunks its
down into segments of 6 bits - six ones in binary equates to 64 which is where it
derives its name.&lt;/p&gt;
&lt;p&gt;Let's look at an example using the three letter word &amp;quot;The&amp;quot;.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;#ascii       T (84)        h (104)       e (101) &amp;lt;-- ASCII plus base10 number
#binary   01010100      01101000     01100101    &amp;lt;-- three bytes
#base64   010101    000110    100001   100101    &amp;lt;-- four segments of six bits&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Given the base64 binary digits we calculate the number for each segment.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;#base64   010101    000110    100001   100101
#total      21        06        33       37&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So now that we've split the 8 bit binary down to 6, and found what that equals in
base10 we can consult the base64 conversion table.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="figure"&gt;
&lt;img alt="Base64 Conversion Table" src="https://danielms.site/images/base64.png" /&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;By cross referencing the binary representation of the four segments (21, 06, 33, 37)
we get the ASCII characters; &lt;code&gt;VGhl&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="gotcha-s"&gt;
&lt;h4&gt;Gotcha's&lt;/h4&gt;
&lt;p&gt;In the example we used a three byte word which can neatly be broken down into four
segments of six. What if the word is four characters, or 32 bits? 32 / 6 is 5 with a
remainder of 2.&lt;/p&gt;
&lt;p&gt;In that case we need to pad out the base64 to indicate that the last segment is not
complete.&lt;/p&gt;
&lt;p&gt;The base2 decimal representation of &amp;quot;Them&amp;quot; is &lt;code&gt;84 104 101 109&lt;/code&gt; or
&lt;code&gt;VGhlbQ==&lt;/code&gt; in base64. As you can see there is two &lt;code&gt;=&lt;/code&gt; symbols tacked on
to the end. This indicates that there is two empty segments of 6 bits at the end of
the encoding.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;#ascii       T (84)        h (104)       e (101)     m (109)
#binary   01010100      01101000     01100101      01101101
#base64   010101    000110    100001   100101   001101  010000
#total      21        06        33        37      13      16&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Looks like that works out perfectly, so where does the extra two segments of zero's
come in that generates the &lt;code&gt;=&lt;/code&gt;'s?&lt;/p&gt;
&lt;p&gt;The segementing of eight bits into six bits cannot delimit half way between a byte.
Meaning the base64 encoding must continue until there is no remainder. Let's explore
this again using just one character.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;#ascii       M (77)
#binary   01011101   00000000   00000000
#base64   010111  010000  000000  000000
#total      19      16      00      00&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I chose the letter 'M' as it is easier to explain than 'T'. Looking at it you can see
that even with only one byte, it takes three bytes for base64's segments of six to
equally divide. Hence, this is why the letter 'M' in base64 would be padded with
&lt;code&gt;==&lt;/code&gt; to indicate as such. This example uses two equals signs but base64 can also
be padded with just one. It all depends on how many segments extra are needed to
generate a zero remainder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-overhead"&gt;
&lt;h4&gt;More overhead&lt;/h4&gt;
&lt;p&gt;Astute readers will see that using base64 requires more overhead than hexadecimal or
binary. So why use it? Base64's genesis was in MIME (Multipurpose Internet Mail Extensions)
where large streams of text are used to send emails and attachments. The problem is that
streaming binary, or hexadecimal could of had unintended consequences as some systems
or programs may interpret certain globs incorrectly. For instance, a null byte in some
systems may indicate that the message has ended when in fact it has not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-information"&gt;
&lt;h4&gt;More information?&lt;/h4&gt;
&lt;p&gt;As always &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Base64"&gt;Wikipedia&lt;/a&gt; has an excellent page
on Base64.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="ELI5"></category></entry><entry><title>Flask, forms and http requests</title><link href="https://danielms.site/posts/2018/Apr/flask-forms-and-http-requests/" rel="alternate"></link><published>2018-04-23T00:00:00+10:00</published><updated>2018-04-23T00:00:00+10:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-04-23:/posts/2018/Apr/flask-forms-and-http-requests/</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Flask, Forms and HTTP Requests&lt;/h2&gt;
&lt;div class="section" id="preface"&gt;
&lt;h3&gt;Preface&lt;/h3&gt;
&lt;p&gt;This week I have been building a small webapp that leverage’s an
external API to populate values in the user pages. And it pains me to
say that I spent a silly length of time debugging what was a rather easy
problem.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Flask, Forms and HTTP Requests&lt;/h2&gt;
&lt;div class="section" id="preface"&gt;
&lt;h3&gt;Preface&lt;/h3&gt;
&lt;p&gt;This week I have been building a small webapp that leverage’s an
external API to populate values in the user pages. And it pains me to
say that I spent a silly length of time debugging what was a rather easy
problem.&lt;/p&gt;
&lt;p&gt;The webapp uses Flask, jinja2 templates and the
&lt;a class="reference external" href="https://github.com/danielmichaels/fuelwatcher"&gt;fuelwatcher&lt;/a&gt; API. The
issue started when trying to institute a search bar that allows the user
to select a series of parameters.&lt;/p&gt;
&lt;p&gt;In the end the following issues were present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My lack of understanding in regards to HTTP requests&lt;/li&gt;
&lt;li&gt;Not knowing how the Flask Request context functions&lt;/li&gt;
&lt;li&gt;Improper formatting of my HTML forms&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="learn-you-some-http-for-great-good"&gt;
&lt;h3&gt;Learn You Some HTTP For Great Good&lt;/h3&gt;
&lt;p&gt;Foolishly, I thought I understood HTTP requests. Sometimes you need to
use your theoretical knowledge practically to fully grasp a concept. It
turns out I was mixing &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; when submitting data to the
server in conjunction with using HTML form attributes incorrectly.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="52%" /&gt;
&lt;col width="42%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;GET&lt;/th&gt;
&lt;th class="head"&gt;POST&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;ol class="first last arabic simple"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;td&gt;Sends Parameters in URL&lt;/td&gt;
&lt;td&gt;Sends Parameters in body&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;ol class="first last arabic simple" start="2"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;td&gt;Used for fetching documents&lt;/td&gt;
&lt;td&gt;Used for updating data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;ol class="first last arabic simple" start="3"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;td&gt;Has max length URL limitations&lt;/td&gt;
&lt;td&gt;No max length (theoretically)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;ol class="first last arabic simple" start="4"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;td&gt;Often Cached&lt;/td&gt;
&lt;td&gt;Server does not cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;ol class="first last arabic simple" start="5"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;td&gt;Idempotent&lt;/td&gt;
&lt;td&gt;Not idempotent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;ol class="first last arabic simple" start="6"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;td&gt;Should not change server data&lt;/td&gt;
&lt;td&gt;Can change server data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;A key point for said webapp is item number 1; I was sending parameters
in the URL when they really needed to be sent via the body. Expanding on
this a little, in a &lt;code&gt;GET&lt;/code&gt; request the parameters are transmitted using
URI schema friendly syntax (see wiki
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier"&gt;here&lt;/a&gt;).
It is common to see query delimiters in the URL such as &lt;code&gt;&amp;amp;`&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;,
&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; and should of been a clue in the debugging process.
Transmitting a &lt;code&gt;GET&lt;/code&gt; request like this fetches data from another
resource, where in contrast my data was needed to execute a function
within the server application to pull information from a third party.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flask-requests"&gt;
&lt;h3&gt;Flask Requests&lt;/h3&gt;
&lt;p&gt;This is deep subject but is tightly coupled to the previous point. The
request object in flask gives access to the global &lt;em&gt;request&lt;/em&gt; object.
Meaning it parses the incoming request data for you. This is important
because it is checking for a &lt;code&gt;method&lt;/code&gt; attribute within that request.
Depending on which &lt;code&gt;method&lt;/code&gt; is sent will affect how it/ you should
check for the request object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; If you incorrectly set the method to &lt;code&gt;GET&lt;/code&gt; when its
actually a &lt;code&gt;POST&lt;/code&gt; you will have problems.&lt;/p&gt;
&lt;p&gt;To receive the request object and parse for the data you want the
following should be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# displaying both POST and GET for clarity&lt;/span&gt;

&lt;span class="c1"&gt;# POST request // Use &amp;#39;form&amp;#39;&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/test&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;attribute to be parsed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="c1"&gt;# or render_template with select=select etc&lt;/span&gt;

&lt;span class="c1"&gt;# GET request // Use &amp;#39;args&amp;#39;&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# here we want to get the value of user (i.e. ?user=some-value)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# or how ever you want to use that data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Given these snippets you can see how mixing &lt;code&gt;GET&lt;/code&gt; with &lt;code&gt;POST&lt;/code&gt; will
lead to calling the wrong request method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-form-tags-for-dummies"&gt;
&lt;h3&gt;HTML form tags for Dummies&lt;/h3&gt;
&lt;p&gt;HTML, basic right? Don’t let hubris fool you, not learning HTML deeply
is foolish. To be fair, this is the first app I have created that has
not required the use of &lt;code&gt;flask-wtf&lt;/code&gt;, which kindly generates forms and
their tags for you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- standard form tags --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ url_for(&amp;#39;app.function&amp;#39;)}}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple, right? Not if you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mix up the HTTP request&lt;/li&gt;
&lt;li&gt;Use the wrong flask request method&lt;/li&gt;
&lt;li&gt;Don’t use an attribute which you can parse in using
&lt;code&gt;request.form.get('attribute')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tightly coupled (I think there is a SOLID principle about this…) and
frustrating when you don’t connect the dots.&lt;/p&gt;
&lt;p&gt;The last piece of the puzzle was the simplest of all, I had not set an
attribute that the request object could get. In this example a
&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag was used and simply appending
&lt;code&gt;name=attribute_to_be_parsed&lt;/code&gt; worked.&lt;/p&gt;
&lt;p&gt;For clarity, first the html.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- html --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;item1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="na"&gt;attribute&lt;/span&gt; &lt;span class="na"&gt;flask&lt;/span&gt; &lt;span class="na"&gt;looks&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;
    &lt;span class="err"&gt;{%&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;in&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt; &lt;span class="err"&gt;%}&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            {{ item }}                  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="na"&gt;what&lt;/span&gt; &lt;span class="na"&gt;we&lt;/span&gt; &lt;span class="na"&gt;get&lt;/span&gt; &lt;span class="na"&gt;in&lt;/span&gt; &lt;span class="na"&gt;the&lt;/span&gt; &lt;span class="na"&gt;response&lt;/span&gt;
        &lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% endfor}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the flask part.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python: flask&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;item_to_get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;parsing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;snip&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… My face when it worked.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Frankenstein; its alive scene" src="https://danielms.site/images/its_alive.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="learn-from-your-mistakes"&gt;
&lt;h3&gt;Learn from your mistakes&lt;/h3&gt;
&lt;p&gt;Everyone makes mistakes, learn from it, be humble and don’t do it again.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="flask"></category></entry><entry><title>Uploading to PyPI</title><link href="https://danielms.site/posts/2018/Apr/uploading-to-pypi/" rel="alternate"></link><published>2018-04-07T00:00:00+10:00</published><updated>2018-04-07T00:00:00+10:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-04-07:/posts/2018/Apr/uploading-to-pypi/</id><summary type="html">&lt;div class="section" id="python-package-index"&gt;
&lt;h2&gt;Python Package Index&lt;/h2&gt;
&lt;p&gt;Python has a wonderful community and package ecosystem. It currently has
over 130,000 packages for download and a large variety to choose from.
To download a python package via the &lt;code&gt;pip&lt;/code&gt; command, the package must
be uploaded to the Python Package Index, or
&lt;a class="reference external" href="https://pypi.org/"&gt;PyPI&lt;/a&gt;. Going forward …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="python-package-index"&gt;
&lt;h2&gt;Python Package Index&lt;/h2&gt;
&lt;p&gt;Python has a wonderful community and package ecosystem. It currently has
over 130,000 packages for download and a large variety to choose from.
To download a python package via the &lt;code&gt;pip&lt;/code&gt; command, the package must
be uploaded to the Python Package Index, or
&lt;a class="reference external" href="https://pypi.org/"&gt;PyPI&lt;/a&gt;. Going forward it may be referred to as the
“warehouse” as PyPI is going through an upgrade of its infrastructure
and for the better.&lt;/p&gt;
&lt;div class="section" id="have-application-now-what"&gt;
&lt;h3&gt;Have application, now what?&lt;/h3&gt;
&lt;p&gt;PyPI offers two servers for the uploading of python packages; testing
and production.&lt;/p&gt;
&lt;p&gt;Sending the package to the test server is a great idea as it allows you
to download your tarball onto any system for testing. This allows you to
do a few novel things like sharing it with friends or co-workers,
spinning up virtual machine’s with different operating systems or
installing it into separate virtual environments with different versions
of python.&lt;/p&gt;
&lt;p&gt;This article does assume you are using a version control system, and in
particular GitHub but this is not a requirement for PyPI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="productionise-your-code"&gt;
&lt;h3&gt;Productionise your code&lt;/h3&gt;
&lt;p&gt;Before looking at how to upload your modules, first it must be made
ready for release into the wild.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="directory-structure"&gt;
&lt;h3&gt;Directory Structure&lt;/h3&gt;
&lt;pre class="code sh literal-block"&gt;
root-dir/           &lt;span class="c1"&gt;# The directory which all your files live.
&lt;/span&gt;    setup.py        &lt;span class="c1"&gt;# covered below (Required)
&lt;/span&gt;    setup.cfg       &lt;span class="c1"&gt;# if using markdown rather than ReStructuredText
&lt;/span&gt;    LICENSE.txt     &lt;span class="c1"&gt;# should be required!
&lt;/span&gt;    README.md       &lt;span class="c1"&gt;# Also should be required!
&lt;/span&gt;    tests/          &lt;span class="c1"&gt;# tests are a good idea
&lt;/span&gt;        test.py
    your-package/
        __init__.py
        awesome.py
        wicked.py
&lt;/pre&gt;
&lt;p&gt;If you look at any great package such as
&lt;a class="reference external" href="https://github.com/requests/requests"&gt;Requests&lt;/a&gt; or
&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;Glances&lt;/a&gt; you will see a
similar (although much more intricate) structure. The key files we
&lt;strong&gt;need&lt;/strong&gt; are &lt;code&gt;setup.py&lt;/code&gt; and &lt;code&gt;setup.cfg&lt;/code&gt; if using Markdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-py"&gt;
&lt;h3&gt;Setup.py&lt;/h3&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# setup.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;
&lt;span class="c1"&gt;# ensure consistent encoding&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="c1"&gt;# always prefer over distutils&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="n"&gt;VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'0.1.0'&lt;/span&gt;
&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/username/package'&lt;/span&gt;
&lt;span class="n"&gt;DOWNLOAD_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/tarball/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'README.md'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'yourpackage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'yourpackage'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blurb that users first see to decide if interesting'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'text/markdown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Optional'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Optional'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;download_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DOWNLOAD_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;#   3 - Alpha&lt;/span&gt;
        &lt;span class="c1"&gt;#   4 - Beta&lt;/span&gt;
        &lt;span class="c1"&gt;#   5 - Production/Stable&lt;/span&gt;
        &lt;span class="s1"&gt;'Development Status :: 3 - Alpha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Intended Audience :: Developers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'License :: OSI Approved :: MIT License'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Programming Language :: Python :: 3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Programming Language :: Python :: 3.5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Programming Language :: Python :: 3.6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The information contained within &lt;code&gt;setup.py&lt;/code&gt; and in particular its
&lt;code&gt;setup()&lt;/code&gt; function is what creates the package’s metadata for parsing
by PyPI once uploaded.&lt;/p&gt;
&lt;p&gt;This is a stripped down version of my own &lt;code&gt;setup.py&lt;/code&gt;. Many tutorials
which are older will use &lt;code&gt;distutils&lt;/code&gt; but PyPI’s
&lt;a class="reference external" href="https://github.com/pypa/sampleproject"&gt;example&lt;/a&gt; structure explicitly
states to favour the newer &lt;code&gt;setuptools&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By using a context manager and the &lt;code&gt;codecs.open&lt;/code&gt; method we can read
the README.md file for use in the &lt;code&gt;long_description&lt;/code&gt; parameter within
&lt;code&gt;setup()&lt;/code&gt;. This is a requirement for the PyPI server as it by default
only parses ReStructuredText. If using README.rst, this can be ignored.
Further, the &lt;code&gt;long_description_content_type='text/markdown'&lt;/code&gt; must be
included or it will not format the content correctly. This is a very
recent addition to PyPI - March 2018.&lt;/p&gt;
&lt;p&gt;Also, the &lt;code&gt;version&lt;/code&gt; is what sets the tarball filename, so creating an
easy to adjust global variable makes it a lot easier to amend this file
when updating your package. As you can see there is three locations that
need to be updated for it to function correctly. (Thanks to &lt;a class="reference external" href="https://dbader.org/"&gt;Dan
Bader&lt;/a&gt; for the idea.)&lt;/p&gt;
&lt;p&gt;Please refer to the example page for more information, particularly if
your package is more complex than just a few modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-cfg"&gt;
&lt;h3&gt;Setup.cfg&lt;/h3&gt;
&lt;p&gt;This is just required for Markdown parsing. As you may see it might just
be easier to utilise the default supported .rst files. Something I may
do in the future.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;metadata&lt;span class="o"&gt;]&lt;/span&gt;
description-file &lt;span class="o"&gt;=&lt;/span&gt; README.md
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="python-setup-py-sdist"&gt;
&lt;h3&gt;Python setup.py sdist&lt;/h3&gt;
&lt;p&gt;Running this command will invoke the &lt;code&gt;setup.py&lt;/code&gt; and create a folder
called &lt;code&gt;dist/&lt;/code&gt; inside your root directory. This is where your
application’s tarball will now live. It is also a good time to create or
update your git tags for your repository.&lt;/p&gt;
&lt;p&gt;FYI, once you create a local tag it must be pushed to the remote.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
git tag X.Y.Z -m &lt;span class="s2"&gt;&amp;quot;Add a message such as; First!&amp;quot;&lt;/span&gt;
git push X.Y.Z      &lt;span class="c1"&gt;# preferred option
&lt;/span&gt;git push --tags     &lt;span class="c1"&gt;# less preferred as it pushs ALL tags to the remote server&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="upload-y-u-no-easy"&gt;
&lt;h3&gt;Upload: y u no easy&lt;/h3&gt;
&lt;p&gt;In theory uploading to PyPI is just that simple. Unfortunately it isn’t
that easy and a lot of the helpful blogs and references out there aren’t
current with the new standards. As always the official user guide
(&lt;a class="reference external" href="https://packaging.python.org/tutorials/distributing-packages/#uploading-your-project-to-pypi"&gt;here&lt;/a&gt;)
is the holy grail but isn’t the easiest reading when completely unsure!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="register"&gt;
&lt;h3&gt;1. Register&lt;/h3&gt;
&lt;p&gt;To upload anything to PyPI you must first register with it. And if you
want to make use of the testing server, you must register with it
separately. Although they use the same software, each server uses a
separate database and this is why two different sign up’s are required.
They can be found here for &lt;a class="reference external" href="https://pypi.org/account/register/"&gt;Live&lt;/a&gt;
and &lt;a class="reference external" href="https://test.pypi.org/account/register/"&gt;Test&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-pypirc"&gt;
&lt;h3&gt;2. Create .pypirc&lt;/h3&gt;
&lt;p&gt;This file allows your development machine to talk to the PyPI servers.
It should look something like this.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="c1"&gt;# ~/.pypirc
&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;distutils&lt;span class="o"&gt;]&lt;/span&gt;
index-servers &lt;span class="o"&gt;=&lt;/span&gt;
  pypi
  pypitest

&lt;span class="o"&gt;[&lt;/span&gt;pypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://upload.pypi.org/legacy/
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username

&lt;span class="o"&gt;[&lt;/span&gt;pypitest&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://test.pypi.org/legacy/
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username
&lt;/pre&gt;
&lt;p&gt;This is current to today’s date but the repository url may change as the
PyPI warehouse continues its evolution. The file &lt;strong&gt;must&lt;/strong&gt; be located in
the home directory. Both username and password can be set in this file,
or in environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-twine"&gt;
&lt;h3&gt;3. Install Twine&lt;/h3&gt;
&lt;p&gt;What is it and why use it? Twine is a package written by the PyPI
maintainers that uses SSL by default when sending information to their
endpoint. Python versions before 2.7.9 and 3.2 do not use this by
default and spill user credentials over the air. Also twine separates
the creation of the package tarball and uploading into two logical
commands; setuptools does not - they are done in the same invocation.&lt;/p&gt;
&lt;p&gt;Tarball? To send your package to the server it first must be compressed
into a single file. So basically, you zip your files to send and when
&lt;code&gt;pip install xxxx&lt;/code&gt; is called your tarball is downloaded and unzipped
at the end user. This is an important point because any changes you make
after creating your tarball are not included in the package so you will
need to rezip it to include them.&lt;/p&gt;
&lt;p&gt;Personally, I install twine on the system interpreter and update it
along with setup tools frequently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upload"&gt;
&lt;h3&gt;4. Upload!&lt;/h3&gt;
&lt;pre class="code sh literal-block"&gt;
twine upload -r pypitest dist/package-version-i-select-explicitly.0.1.0.tar.gz
&amp;gt;&amp;gt;&amp;gt; Uploading distributions to https://test.pypi.org/legacy/
&amp;gt;&amp;gt;&amp;gt; Enter your password:
&amp;gt;&amp;gt;&amp;gt; Uploading package-version-i-select-explicitly.0.1.0.tar.gz
&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;-r&lt;/code&gt; flag allows you to set which server to send the file
too. This file name is setup in the &lt;code&gt;.pypirc&lt;/code&gt; file and if you have
setup a username it will not prompt you for it. Likewise, it will not
prompt for a password should you choose to enter that, and if you do
consider &lt;code&gt;chmod 600&lt;/code&gt; on that file for security reasons.&lt;/p&gt;
&lt;p&gt;In many examples you may see something like this:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
twine upload -r pypitest dist/*
&lt;/pre&gt;
&lt;p&gt;This will upload all of your tarball’s located in the &lt;code&gt;dist/&lt;/code&gt;
directory. I personally choose which distribution to upload. Either, or.
Once done, goto the test PyPI and check to see that it looks as
expected, or as previously stated download the test file and check its
functioning as expected.&lt;/p&gt;
&lt;p&gt;This can be done like so:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
pip install --index-url https://test.pypi.org/simple/ yourPackageName
&lt;/pre&gt;
&lt;p&gt;Once happy send that baby to the production PyPI by repeating the
commands but this time specifying the &lt;code&gt;pypi&lt;/code&gt; server like so:&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
twine upload -r pypi dist/package-version-i-select-explicitly.0.1.0.tar.gz
&lt;/pre&gt;
&lt;p&gt;You now have a production package in the wild. Check out your code at
&lt;a class="reference external" href="https://libraries.io/"&gt;Libraries.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="help-pypi"&gt;
&lt;h3&gt;5. Help PyPI&lt;/h3&gt;
&lt;p&gt;None of this would be possible with the tireless work of the Python
Software Foundation and the handful of volunteers that make PyPI a
reality. Join the PSF and maybe consider a donation, or convince your
employer to contribute if they rely on python software! Without PSF and
PyPI we wouldn’t have python as we know it today. Please visit and sign
up here: &lt;a class="reference external" href="https://psfmember.org/"&gt;PSF&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category></entry><entry><title>Mentoring at CoderDojo</title><link href="https://danielms.site/posts/2018/Mar/mentoring-at-coderdojo/" rel="alternate"></link><published>2018-03-26T00:00:00+11:00</published><updated>2018-03-26T00:00:00+11:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-03-26:/posts/2018/Mar/mentoring-at-coderdojo/</id><summary type="html">&lt;div class="section" id="coderdojo"&gt;
&lt;h2&gt;CoderDojo&lt;/h2&gt;
&lt;p&gt;Today I volunteered my time at a local CoderDojo as a Mentor. The basic
premise of a CoderDojo is it’s a place where children between 7 and 17
can learn programming, robotics or basically any technology that might
inspire them. The kids are called ‘ninjas’ whilst the program …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="coderdojo"&gt;
&lt;h2&gt;CoderDojo&lt;/h2&gt;
&lt;p&gt;Today I volunteered my time at a local CoderDojo as a Mentor. The basic
premise of a CoderDojo is it’s a place where children between 7 and 17
can learn programming, robotics or basically any technology that might
inspire them. The kids are called ‘ninjas’ whilst the program
co-ordinators are known as champions, and people who help out in their
area of expertise are the mentors.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="what-did-we-do"&gt;
&lt;h3&gt;What did we do?&lt;/h3&gt;
&lt;p&gt;There was around 10-15 kids there and an almost fifty percent split
between boys and girls. Most of them were coding away on their laptops
using Scratch. Some of them had pretty good little programs; games,
stories and creative landscapes being the general theme. They also had a
&lt;a class="reference external" href="http://learn.makeblock.com/en/ultimate2/"&gt;Makeblock&lt;/a&gt; robot which the
kids could build into ten different configurations. It reminded me of
the K’nex toys I had as a kid only way cooler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="windows-sucks-when-licences-expire"&gt;
&lt;h3&gt;Windows sucks… when licences expire&lt;/h3&gt;
&lt;p&gt;It was great to see that the library (where this dojo is housed) were
able to secure some retired laptops from the local government. But also
so painful to be a part of because they, as expected, were all Windows
based. Almost all had expired licences, missing product keys, or were
locked down with administrator access for which no password was
supplied. Thankfully, they will all now become the proud new emissaries
of linux - although one old laptop was struggling to run with Ubuntu 16.
Arch, anyone? &lt;code&gt;:smirk:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also, I tip my hat to those who donate to charitable causes such as
CoderDojo and give away their old laptops. Especially in suburbs where
being gifted a functional laptop can be like winning the lottery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coderdojos-one-rule-be-cool"&gt;
&lt;h3&gt;CoderDojo’s one rule: &lt;a class="reference external" href="https://www.youtube.com/watch?v=k5ciSFjEN1c"&gt;Be Cool!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Click the link for a few minute video that summarises the ethos and
idea’s behind the program.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="coderdojo"></category></entry><entry><title>TIL How Network Time Protocol Works</title><link href="https://danielms.site/posts/2018/Mar/til-how-network-time-protocol-works/" rel="alternate"></link><published>2018-03-23T00:00:00+11:00</published><updated>2018-03-23T00:00:00+11:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-03-23:/posts/2018/Mar/til-how-network-time-protocol-works/</id><summary type="html">&lt;div class="section" id="network-time-protocol"&gt;
&lt;h2&gt;Network Time Protocol&lt;/h2&gt;
&lt;p&gt;So today I watched a
&lt;a class="reference external" href="https://www.youtube.com/watch?v=MDmNvVG9AnQ"&gt;talk&lt;/a&gt; on NTP and it was
amazing. I will do my best to summarise the core parts in this post.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="what-is-it"&gt;
&lt;h3&gt;What is it?&lt;/h3&gt;
&lt;p&gt;Network Time Protocol allows clocks between computers to be synchronised
over the internet or local area network. It was …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="network-time-protocol"&gt;
&lt;h2&gt;Network Time Protocol&lt;/h2&gt;
&lt;p&gt;So today I watched a
&lt;a class="reference external" href="https://www.youtube.com/watch?v=MDmNvVG9AnQ"&gt;talk&lt;/a&gt; on NTP and it was
amazing. I will do my best to summarise the core parts in this post.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="what-is-it"&gt;
&lt;h3&gt;What is it?&lt;/h3&gt;
&lt;p&gt;Network Time Protocol allows clocks between computers to be synchronised
over the internet or local area network. It was developed by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/David_L._Mills"&gt;David L.
Mills&lt;/a&gt; in 1985 and is
currently in its fourth version. Accurate to a few milliseconds of
Coordinated Universal Time, NTP is a fundamental instrument in modern
networking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-do-we-need-it"&gt;
&lt;h3&gt;Why do we need it?&lt;/h3&gt;
&lt;p&gt;Its pretty important that we all agree on what time it is. It is even
more important that banks and other financial institutions agree on a
universal time stamp when conducting transactions, especially if they
are ordered chronologically. Things like SSL certificates could be
spoofed or bypassed if NTP did not ensure a universal time. There is
probably many other security related issues that NTP solves but I think
the point is clear, its a necessary protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-it-get-the-right-time"&gt;
&lt;h3&gt;How does it get the “right” time?&lt;/h3&gt;
&lt;p&gt;Most people have heard of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Atomic_clock"&gt;atomic
clocks&lt;/a&gt; or GPS time.
Basically, these methods are considered as accurate as humans can
calculate to ‘real’ time. It would be simplistic to say that NTP polls
these sources for the current time - but nonetheless that’s the basic
premise.&lt;/p&gt;
&lt;p&gt;Diving deeper, NTP actually uses things called a ‘Stratum’. An atomic
clock is a Stratum 0, also known as a reference clock. The Stratum’s go
from 0 all the way to 16. Stratum 1 is the closest an NTP server can get
to the reference clock, and is usually within a few milliseconds. These
are referred to as primary time servers. Each Stratum refers to the
preceding number, and polls that server for its time. Stratum 3 will
synchronise to a Stratum 2 server for example. They can and often do
peer with servers in their own Stratum as a sanity check and backup. Of
note Stratum 16 means ‘unsynchronised’.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="the-process"&gt;
&lt;h3&gt;The Process&lt;/h3&gt;
&lt;p&gt;Roughly the process follows something like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ask for the time,&lt;/li&gt;
&lt;li&gt;get the roundtrip times,&lt;/li&gt;
&lt;li&gt;figure out if you trust the response,&lt;/li&gt;
&lt;li&gt;make any adjustments,&lt;/li&gt;
&lt;li&gt;repeat every 64 seconds, forever.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="roundtrip-times"&gt;
&lt;h4&gt;Roundtrip Times&lt;/h4&gt;
&lt;p&gt;After asking the time from a server, NTP needs to factor in how long it
took to get the response back because the time from when it sent the
response to receiving it will now be out of sync.&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="c1"&gt;# The four timestamps needed for calculating the time
&lt;/span&gt;&lt;span class="nv"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timestamp of request packet
&lt;span class="nv"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timestamp when server received packet
&lt;span class="nv"&gt;t3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timestamp of servers reply transmission
&lt;span class="nv"&gt;t4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; clients response packet reception timestamp
&lt;/pre&gt;
&lt;p&gt;Example of NTP packet&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="m"&gt;13&lt;/span&gt;:11:58.155997 IP &lt;span class="o"&gt;(&lt;/span&gt;tos 0x0, ttl &lt;span class="m"&gt;56&lt;/span&gt;, id &lt;span class="m"&gt;42684&lt;/span&gt;, offset &lt;span class="m"&gt;0&lt;/span&gt;, flags &lt;span class="o"&gt;[&lt;/span&gt;none&lt;span class="o"&gt;]&lt;/span&gt;, proto UDP &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, length &lt;span class="m"&gt;76&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    cpe-110-141-196-84.vic.asp.telstra.net.ntp &amp;gt; client.local.lan.ntp: &lt;span class="o"&gt;[&lt;/span&gt;udp sum ok&lt;span class="o"&gt;]&lt;/span&gt; NTPv4, length &lt;span class="m"&gt;48&lt;/span&gt;
    Server, Leap indicator:  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, Stratum &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;primary reference&lt;span class="o"&gt;)&lt;/span&gt;, poll &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;1024s&lt;span class="o"&gt;)&lt;/span&gt;, precision -23
    Root Delay: &lt;span class="m"&gt;0&lt;/span&gt;.000000, Root dispersion: &lt;span class="m"&gt;0&lt;/span&gt;.001953, Reference-ID: PPS^&amp;#64;
      Reference Timestamp:  &lt;span class="m"&gt;3730684254&lt;/span&gt;.163282214 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;/03/22 &lt;span class="m"&gt;13&lt;/span&gt;:10:54&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# t1
&lt;/span&gt;      Originator Timestamp: &lt;span class="m"&gt;3730684318&lt;/span&gt;.091658531 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;/03/22 &lt;span class="m"&gt;13&lt;/span&gt;:11:58&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# t2
&lt;/span&gt;      Receive Timestamp:    &lt;span class="m"&gt;3730684318&lt;/span&gt;.125586175 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;/03/22 &lt;span class="m"&gt;13&lt;/span&gt;:11:58&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# t3
&lt;/span&gt;      Transmit Timestamp:   &lt;span class="m"&gt;3730684318&lt;/span&gt;.125623665 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;/03/22 &lt;span class="m"&gt;13&lt;/span&gt;:11:58&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# t4
&lt;/span&gt;        Originator - Receive Timestamp:  +0.033927643
        Originator - Transmit Timestamp: +0.033965133
&lt;/pre&gt;
&lt;p&gt;To calculate the current time from the servers response NTP does the
following calculation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
t4 - t1 = roundtrip time
roundtrip time / 2 = one-way latency
t3 + one-way latency = current time
&lt;/pre&gt;
&lt;p&gt;The next part of this is whether or not the client trusts the NTP
server. This is done in a few ways. Firstly, by sending out several
queries to several servers rather than trusting that the response from
one server is correct. NTP then favours the lowest latency and discards
any outliers. Secondly, NTP uses some statistical analysis of its
responses over a period of minutes to determines who is accurate and who
isn’t based off those statistics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-adjustments"&gt;
&lt;h4&gt;Make Adjustments&lt;/h4&gt;
&lt;p&gt;What NTP tries to never do is go backwards in time. Sometimes it has to
and we will get to that. But for the most part what it does it ‘slew’
the clock. Simply it just slows or speeds up the clock to match the
correct time and does this in a gradual way with small increments.&lt;/p&gt;
&lt;p&gt;At its max adjustment speed of 500ppm it would take 2000 seconds to make
an adjustment of just one second!&lt;/p&gt;
&lt;p&gt;Given the slow slew rate, slewing is capped to 128 milliseconds.
Anything above that cannot be slewed and must be ‘stepped’ or jumped to
the correct time, be it forward or backward. This does not happen often
except in cases such as bringing a machine back online after maintenance
or during initial setup. Any machine that is over 1000 seconds out must
be manually configured within that threshold or it will not be able to
receive adjustments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;That’s Network Time Protocol in a nutshell. I had never paid much heed
to NTP prior to &lt;a class="reference external" href="https://twitter.com/jpotischj"&gt;Joel Potischman’s&lt;/a&gt;
talk at !!Con. He gave a great talk and it only goes for ten minutes and
uses some good graphs and visualisations that are missing from this
post. If you want to see NTP in action on your computer you can use
&lt;code&gt;tcpdump -vv port 123&lt;/code&gt; or check it out in wireshark. Whilst writing
this I found a bad response from one server that was +1023 seconds out
and thus dropped as an outlier - so it does happen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="til"></category></entry><entry><title>Scapy rssi snippet</title><link href="https://danielms.site/posts/2018/Feb/scapy-rssi-snippet/" rel="alternate"></link><published>2018-02-28T00:00:00+11:00</published><updated>2018-02-28T00:00:00+11:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-02-28:/posts/2018/Feb/scapy-rssi-snippet/</id><summary type="html">&lt;div class="section" id="scapy-snippets"&gt;
&lt;h2&gt;Scapy Snippets&lt;/h2&gt;
&lt;div class="section" id="how-to-get-rssi-from-wlan-packet"&gt;
&lt;h3&gt;How to get RSSI from WLAN packet&lt;/h3&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scapy.layers.dot11&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RadioTap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dot11&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rssi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;haslayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RadioTap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbm_antsignal&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;caveat: currently only tested on Ralink: RT5370 chipset&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="scapy-snippets"&gt;
&lt;h2&gt;Scapy Snippets&lt;/h2&gt;
&lt;div class="section" id="how-to-get-rssi-from-wlan-packet"&gt;
&lt;h3&gt;How to get RSSI from WLAN packet&lt;/h3&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scapy.layers.dot11&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RadioTap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dot11&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_rssi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;haslayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RadioTap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbm_antsignal&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;caveat: currently only tested on Ralink: RT5370 chipset&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="scapy"></category><category term="python"></category></entry><entry><title>Linux file permissions</title><link href="https://danielms.site/posts/2018/Feb/linux-file-permissions/" rel="alternate"></link><published>2018-02-04T00:00:00+11:00</published><updated>2018-02-04T00:00:00+11:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-02-04:/posts/2018/Feb/linux-file-permissions/</id><summary type="html">&lt;div class="section" id="linux-chmod-and-chown"&gt;
&lt;h2&gt;Linux: Chmod and Chown&lt;/h2&gt;
&lt;div class="section" id="chmod-change-file-mode-bits"&gt;
&lt;h3&gt;&lt;strong&gt;Chmod: Change File Mode Bits&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="m"&gt;15&lt;/span&gt;:45:18 user&amp;#64;example temporary
total 12K
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users &lt;span class="m"&gt;4&lt;/span&gt;.0K Feb  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:29 .
drwx------ &lt;span class="m"&gt;33&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users &lt;span class="m"&gt;4&lt;/span&gt;.0K Feb  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:45 ..
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users    &lt;span class="m"&gt;0&lt;/span&gt; Jan &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:14 &lt;span class="m"&gt;1&lt;/span&gt;
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="linux-chmod-and-chown"&gt;
&lt;h2&gt;Linux: Chmod and Chown&lt;/h2&gt;
&lt;div class="section" id="chmod-change-file-mode-bits"&gt;
&lt;h3&gt;&lt;strong&gt;Chmod: Change File Mode Bits&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="m"&gt;15&lt;/span&gt;:45:18 user&amp;#64;example temporary
total 12K
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users &lt;span class="m"&gt;4&lt;/span&gt;.0K Feb  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:29 .
drwx------ &lt;span class="m"&gt;33&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users &lt;span class="m"&gt;4&lt;/span&gt;.0K Feb  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:45 ..
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users    &lt;span class="m"&gt;0&lt;/span&gt; Jan &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:14 &lt;span class="m"&gt;1&lt;/span&gt;
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users    &lt;span class="m"&gt;0&lt;/span&gt; Jan &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:14 &lt;span class="m"&gt;3&lt;/span&gt;
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; users   &lt;span class="m"&gt;16&lt;/span&gt; Feb  &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:29 file.txt
&lt;/pre&gt;
&lt;p&gt;In the above example output from left to right we have: filemode, number
of links, user, group, size, date last modified, name of file.&lt;/p&gt;
&lt;p&gt;We will focus on the filemode for now.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
drwxr-xr-x
0123456789 &amp;lt;-- this is our reference marker.
&lt;/pre&gt;
&lt;p&gt;0: is either &lt;code&gt;-&lt;/code&gt; meaning a file, or &lt;code&gt;d`&lt;/code&gt; signifying that it is a
directory.&lt;/p&gt;
&lt;p&gt;1-3: represents the user or owner of the file.&lt;/p&gt;
&lt;p&gt;4-6: is reference to the group that owns the file.&lt;/p&gt;
&lt;p&gt;7-9: everybody else, or other.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change the filemodes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;chmod&lt;/code&gt; is used to change the modefiles of files. Its
basic syntax is as follows:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;chmod u+x file.txt&lt;/code&gt; – The &lt;code&gt;u&lt;/code&gt; signifies &lt;code&gt;user&lt;/code&gt;, the &lt;code&gt;+&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;means add and the &lt;code&gt;x&lt;/code&gt; refers to execute. This can be stacked, and used to
takeaway permissions.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;chmod -R g+rwx directory&lt;/code&gt; would recursively (&lt;code&gt;-R&lt;/code&gt;) change all
&lt;code&gt;group&lt;/code&gt; files within &lt;code&gt;directory&lt;/code&gt; to read, write and execute.&lt;/p&gt;
&lt;p&gt;Importantly, if the user or group &lt;strong&gt;does not&lt;/strong&gt; own the file or directory
then the command &lt;code&gt;sudo&lt;/code&gt; must be used. Otherwise it is not needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Octal:&lt;/strong&gt; In the above examples we used &lt;code&gt;rwx&lt;/code&gt; to note what
permissions we wanted to add or remove from a file. Another method is to
use the &lt;em&gt;octal&lt;/em&gt; notation; numeral.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod 777 file.txt&lt;/code&gt; would mean that we are giving &lt;code&gt;rwx&lt;/code&gt; to user,
group and other. How does 7 equal &lt;code&gt;rwx&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;This is because &lt;code&gt;4&lt;/code&gt; gives read access, &lt;code&gt;2&lt;/code&gt; is write and &lt;code&gt;1&lt;/code&gt;,
execute. When using octal we add the numbers together, so if we wanted
read, write and execute we simply add 4,2,1 which equals 7.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod 765 xxx.txt&lt;/code&gt; would mean: - user: read, write and execute -
group: read and write - other: read and execute&lt;/p&gt;
&lt;p&gt;Using this is very simple, but how do I remove permissions? Previosuly,
we would &lt;code&gt;chmod u-x&lt;/code&gt; i.e.&amp;nbsp;we used the &lt;code&gt;-&lt;/code&gt; to signify removal of
priviledge. Using octal we just set new filemode to what we want and it
will add or subtract the mode accordingly. An example below:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod a+rwx&lt;/code&gt; == give read, write and execute to all (user,group a)nd
other) &lt;em&gt;or&lt;/em&gt; &lt;code&gt;777&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But if we only wanted the user to have &lt;code&gt;rwx&lt;/code&gt; and everyone else read
and write we could call: &lt;code&gt;chmod 755&lt;/code&gt;. To use non-octal here would be
&lt;code&gt;chmod go-x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Important note: As with all things linux there are many more advanced
features. We are just touching the surface here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chown-change-file-owner-and-group"&gt;
&lt;h3&gt;&lt;strong&gt;Chown: Change File Owner and Group&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;chown&lt;/code&gt; command deals with changing the ownership of files and
directories.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
drwxrwxr-x  1 test users 14.0K Jan 21 12:14 dir_1

-rw-r--r--  1   admin   root   16 Feb  1 14:29 file.txt
[filemode]     [owner] [grp]
&lt;/pre&gt;
&lt;p&gt;Above we have a break down of the important parts of our &lt;code&gt;ls -la&lt;/code&gt;
output.&lt;/p&gt;
&lt;p&gt;In the faked output we have &lt;code&gt;admin&lt;/code&gt; in the first positon which is
representing the owner/ creator of &lt;code&gt;file.txt&lt;/code&gt;. In postition two we
have the group that &lt;code&gt;file.txt&lt;/code&gt; belongs to, in this case its &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The owner of a file can make changes to the filemode and ownsership of a
file without super user priviledges. However, if another user wanted to
change the ownership they would require this access.&lt;/p&gt;
&lt;p&gt;To make a change is as simple as &lt;code&gt;chown [user]:[group] [file/s]&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo chown root file.txt # 1.
$ ls -l
-rw-r--r--  1 root root   16 Feb  1 14:29 file.txt
&lt;/pre&gt;
&lt;p&gt;The simplest usage of &lt;code&gt;chown&lt;/code&gt; is the command plus the new owner and
file or directory to be affected.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo chown -R admin dir_1 # 2.
$ ls -l
drwxrwxr-x  1 admin users 14.0K Jan 21 12:14 dir_1
&lt;/pre&gt;
&lt;p&gt;If we wanted to make the changes to all files and directories inside a
directory we can add &lt;code&gt;-R&lt;/code&gt;. This is a recursive function with the same
syntax as &lt;code&gt;chmod&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo chown admin:admin file.txt
$ ls -l
-rw-r--r--  1 admin admin   16 Feb  1 14:29 file.txt
&lt;/pre&gt;
&lt;p&gt;To specify a new owner and group the use of &lt;code&gt;:&lt;/code&gt; between the owner and
group can be used. &lt;code&gt;admin:users&lt;/code&gt;, ’root:root` and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="linux"></category></entry><entry><title>SSH in a nutshell</title><link href="https://danielms.site/posts/2018/Jan/ssh-in-a-nutshell/" rel="alternate"></link><published>2018-01-28T00:00:00+11:00</published><updated>2018-01-28T00:00:00+11:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-01-28:/posts/2018/Jan/ssh-in-a-nutshell/</id><summary type="html">&lt;div class="section" id="ssh"&gt;
&lt;h2&gt;SSH&lt;/h2&gt;
&lt;div class="section" id="definition"&gt;
&lt;h3&gt;Definition&lt;/h3&gt;
&lt;p&gt;Straight from the man pages:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ssh (SSH client) is a program for logging into a remote machine and for
executing commands on a remote machine. It is intended to provide secure
encrypted communications between two untrusted hosts over an insecure
network. X11 connections, arbitrary TCP ports and UNIX-domain …&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="ssh"&gt;
&lt;h2&gt;SSH&lt;/h2&gt;
&lt;div class="section" id="definition"&gt;
&lt;h3&gt;Definition&lt;/h3&gt;
&lt;p&gt;Straight from the man pages:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ssh (SSH client) is a program for logging into a remote machine and for
executing commands on a remote machine. It is intended to provide secure
encrypted communications between two untrusted hosts over an insecure
network. X11 connections, arbitrary TCP ports and UNIX-domain sockets
can also be forwarded over the secure channel.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="setup-old-school-method"&gt;
&lt;h4&gt;Setup (Old School Method)&lt;/h4&gt;
&lt;p&gt;On a new machine we need to setup up ssh. This includes installation if
its not installed by default (i.e.&amp;nbsp;Arch Linux). It also includes the
creation of our private and public keys (maybe write a post about the
basics of pgp).&lt;/p&gt;
&lt;p&gt;To create a new key we use &lt;code&gt;ssh-keygen&lt;/code&gt;. Taken straight from the man
pages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;ssh-keygen&lt;/strong&gt; generates, manages and converts authentication keys
for ssh. It can create keys for use by SSH protocols versions one and
two. Protocol one is depreciated and should not be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When creating a key we need to specify the type. To do this we use the
&lt;code&gt;-t&lt;/code&gt; flag followed by one of the following specifications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RSA, DSA, ECDSA, ED25519&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If no flag is present it will default to RSA which is what we want.&lt;/p&gt;
&lt;p&gt;Also important is the number of bits in the key to generate. By default
it will generate a key length of 2048 bits. In this article we will not
discuss non-RSA configurations which require different lengths (refer to
the man pages for more info). Generally it is recommended to use 4096
bits of entropy, to do that we use the &lt;code&gt;-b&lt;/code&gt; followed by the number, in
this case 4096.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;ssh-keygen -t rsa -b 4096&lt;/code&gt; will create the ssh key.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="SSH commandline" src="https://danielms.site/images/sshcmdline.png" /&gt;
&lt;/div&gt;
&lt;p&gt;It will ask for a password, this is up to the user but it does not limit
your ability to login without entering password as we discuss below. It
does however, offer protection should your device be stolen or
compromised. The password can be bruteforced but it will give you time
to manually for to your administered servers and delete the public key
that matches the now stolen private key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="key-based-authentication"&gt;
&lt;h4&gt;Key Based Authentication&lt;/h4&gt;
&lt;p&gt;Key based authentication allows seamless interaction between disparate
hosts over the network. Generally, to ssh into a remote server the
client will need to enter the servers password. Using ssh keys (unless
they too are configured with a password) negates this.&lt;/p&gt;
&lt;p&gt;Below we see how to transfer the clients public key to the remote
server.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
scp ~/.ssh/id_rsa.pub user&amp;#64;remote.server.org:/home/user/.ssh/clients_public_key.pub
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scp&lt;/code&gt; is the Secure Copy program. It uses ssh for the data transfer
and provides the same security. The basic syntax is to call &lt;code&gt;scp&lt;/code&gt; then
append the file to be copied, followed by the destination to send it to.
The destination is punctuated by a colon &lt;code&gt;:&lt;/code&gt; coupled with the location
on the remote server in which the file should be saved to (as seen
above).&lt;/p&gt;
&lt;p&gt;Next we need to authorize the key we have sent to the remote server. If
we do not authorize it, it will not allow us to login using the key,
i.e.&amp;nbsp;we will be prompted for a password each time. To do that we can
input the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat ~/.ssh/name_of_new_key.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Firstly, in linux we do not need to append a file name at the end so
this works as expected. And secondly, the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; will create the file
for us if it does not already exist.&lt;/p&gt;
&lt;p&gt;Finally, it is important to set permissions on the new directory and its
keys. Permissions is another topic, but we want the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
chmod 700 /home/user
chmod 700 /home/user/.ssh
chmod 600 /home/user/.ssh/authorized_keys
&lt;/pre&gt;
&lt;p&gt;We want our &lt;code&gt;/home&lt;/code&gt; and &lt;code&gt;/home/.ssh&lt;/code&gt; to have read, write and execute
only by the user and &lt;code&gt;../authorized_keys&lt;/code&gt; only read and writable by
the user. This is on the remote server. We can also now delete the
public key from within &lt;code&gt;~/.ssh/&lt;/code&gt; as it is saved to the authorized keys
although this is optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-v2-new-school"&gt;
&lt;h4&gt;Setup V2 (New School)&lt;/h4&gt;
&lt;p&gt;After explaining the old way or more traditional (sometimes better) way
we turn to &lt;code&gt;ssh-copy-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To do all of that in one command we can just enter:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
ssh-copy-id user&amp;#64;remote_server
&lt;/pre&gt;
&lt;p&gt;And, it will do everything in about 2 seconds (after you authenticate
with the remotes password). To test it without committing anything use
the &lt;code&gt;-n&lt;/code&gt; flag (dry run). It is important to know what is happening in
the background though, so do the old school method to get a better feel
for linux – if you are old hat, just use this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-security-measures"&gt;
&lt;h4&gt;Further Security Measures&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Disable Password Authentication&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After we have setup key based authentication on the remote server we may
want to close off all non-key authenticated access via ssh. This means
that only those with authorized keys will be able to access the server.
In a home network this may be overkill (dependent on the situation or
security posture/threat model you need, or face) but if you are using
ssh to administer a VPS this should be the minimum standard.&lt;/p&gt;
&lt;p&gt;To do this we need to edit our &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; &lt;strong&gt;back it up
first!&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To do this we just change &lt;code&gt;PasswordAuthentication&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt; inside
the file. After the change we need to restart the ssh daemon to make the
change immediate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change SSH Default Port&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many of the automated botnets automatically search the web looking for
open ports, and exploiting them by entering common default credentials.
Whilst changing the ssh port from 22 to something else is security by
obscurity it does enough to make elevate you above the ‘low hanging
fruit’ category.&lt;/p&gt;
&lt;p&gt;To alter the default port the &lt;code&gt;sshd_config&lt;/code&gt; needs to be edited.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#Port 22 &amp;lt;---- Uncomment this and change port
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::
&lt;/pre&gt;
&lt;p&gt;You need to be root to do this. And the ssh daemon must be restarted.
&lt;code&gt;systemctl restart sshd.service&lt;/code&gt; on systemd.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Auto Deny/Fail2Ban&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To access a host via ssh it needs to be open over the network. This is
adds risk and creates an attack vector. &lt;em&gt;fail2ban&lt;/em&gt; is a service that
attempts to mitigate this by altering your firewalls configuration after
a set number of unsuccessful login attempts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Port Knocking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A method to surreptitiously open the port to ssh. By making connection
attempts (“knocking”) on ports in a predefined manner the firewall
allows access to ssh. Again, this is security through obscurity but
coupled with several strategies does help to harden the system. Nmap can
ascertain if a host has port knocking enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="ssh"></category></entry><entry><title>Rysnc cheatsheet</title><link href="https://danielms.site/posts/2018/Jan/rysnc-cheatsheet/" rel="alternate"></link><published>2018-01-24T00:00:00+11:00</published><updated>2018-01-24T00:00:00+11:00</updated><author><name>Dan</name></author><id>tag:danielms.site,2018-01-24:/posts/2018/Jan/rysnc-cheatsheet/</id><summary type="html">&lt;div class="section" id="rsync"&gt;
&lt;h2&gt;Rsync&lt;/h2&gt;
&lt;p&gt;This is a short primer on the most simple of rsync’s capabilities.&lt;/p&gt;
&lt;p&gt;Rsync is a fast and extraordinarily versatile file copying tool. It uses
a delta transfer algorithm, which reduces the amount of data sent over
the network by sending only the differences between the source and
destination …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="rsync"&gt;
&lt;h2&gt;Rsync&lt;/h2&gt;
&lt;p&gt;This is a short primer on the most simple of rsync’s capabilities.&lt;/p&gt;
&lt;p&gt;Rsync is a fast and extraordinarily versatile file copying tool. It uses
a delta transfer algorithm, which reduces the amount of data sent over
the network by sending only the differences between the source and
destination files. It can contact remote systems via SSH or through a
rsync daemon over TCP.&lt;/p&gt;
&lt;div class="section" id="basic-syntax"&gt;
&lt;h3&gt;Basic Syntax&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;: The ‘r’ flag denotes that the operation is recursive. It will
copy across all files and folders inside the source directory. However,
if the source destination does not have a trailing slash it will copy
the folder, rather than the files inside the folder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;: Archive mode is superior to recursive mode as it will sustain
symbolic links, special and device files, modification times, group,
owner and permissions.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--dry-run&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt;: As a sanity check it is worth checking that
your command is going to do what you &lt;em&gt;think&lt;/em&gt; it is going to do. The dry
run will not execute the command. It can (read: should) be coupled with
the next command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt;: Verbose will print out the what actions were undertaken by the
command. If &lt;code&gt;-n&lt;/code&gt; is not coupled with a verbose flag it will print
nothing to the screen.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--delete&lt;/code&gt;: Will remove extra items in the destination folder that do
not exist in the source directory. &lt;strong&gt;Caution:&lt;/strong&gt; This can lead to
complete deletion of the destination folder if incorrectly implemented.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-z&lt;/code&gt;: When transferring across the network rsync provides a
compression option to save on bandwidth.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-P&lt;/code&gt;: Outputs a progress bar to the terminal.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--exclude=important_file.txt&lt;/code&gt;: Can be used to omit files or
directories from being synced.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--exclude=backups/ --include=backups/most_recent&lt;/code&gt;: Inside the
exclusion we can explicitly include certain file, folders or patterns
that fall inside the broader exclude.&lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rsync -azvnP source_dir/ destination_dir/
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="syncing-across-remote-systems"&gt;
&lt;h3&gt;Syncing Across Remote Systems&lt;/h3&gt;
&lt;p&gt;Syncing can be either a “pull” or “push”.&lt;/p&gt;
&lt;p&gt;The “push”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rsync -a ~/local_source_dir username&amp;#64;remote_host:/home/username/destination_dir
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;In this example we **are*&lt;/em&gt; copying the directory, not just its contents
so we omit the trailing slash.* Here we are sending data from the source
to the destination.&lt;/p&gt;
&lt;p&gt;The “pull”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rsync -a username&amp;#64;remote_host:/home/username/destination_dir local_source_dir
&lt;/pre&gt;
&lt;p&gt;This pull operation is syncing the remote directory with the local
system. We might use this to backup a small database file for instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;SSH&lt;/h3&gt;
&lt;p&gt;Syncing between systems if made much easier if key based authentication
is enabled. If not, the user will be prompted with a password.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="rsync"></category></entry></feed>